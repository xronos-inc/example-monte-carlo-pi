# SPDX-FileCopyrightText: Â© 2024 Xronos Inc.
# SPDX-License-Identifier: BSD-3-Clause

target Python {
    keepalive: True
}

preamble {=
    # pylint: disable=reimported,wrong-import-position,wrong-import-order,ungrouped-imports,import-outside-toplevel

    import time
    import requests
    import socket
=}

reactor InfluxPublisher(telegraf_url = "http://0.0.0.0:8186/telegraf") {
    input points_generated
    input estimate
    input error

    state telegraf_session
    state hostname
    state telegraf_session_active

    reaction(startup) {=
        self.telegraf_session = requests.Session()
        self.hostname = socket.gethostname()
        self.telegraf_session_active = True
    =}

    reaction(shutdown) {=
        if self.telegraf_session_active:
            self.telegraf_session.close()
            self.telegraf_session_active = False
    =}

    reaction(points_generated, estimate, error) {=
        timestamp_ns = int(time.time() * 1e9)
        if self.telegraf_session_active:
            try:
                response = self.telegraf_session.post(
                    self.telegraf_url,
                    data = f"example-monte-carlo-pi,language=py,hostname={self.hostname} points={points_generated.value},estimate={estimate.value},error={error.value} {timestamp_ns}",
                    headers = {"Content-Type": "application/x-www-form-urlencoded"})
                if not response.ok:
                    print("Unable to post to Telegraf; disabling.")
                    self.telegraf_session_active = False
                    self.telegraf_session.close()
            except requests.RequestException as e:
                print("Unable to post to Telegraf; disabling.")
                self.telegraf_session_active = False
                self.telegraf_session.close()
    =}
}

main reactor {
    publisher = new InfluxPublisher()
}